//time complexity of binary search log n
//in binary search first occurance
#include<iostream>
using namespace std;
int main(){
    int n=12;
    int arr[n]={1,2,2,2,3,3,4,4,5,6,7,7};
    int target=2;
    int l=0;
    int r=n-1;
    int first=-1;

    while(l<=r){
        int mid=(l+r)/2;
        if(arr[mid]==target){
            first=mid;
            r=mid-1;
        }
        else if(arr[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;

        }

    }
    cout<<first;
    return 0;

}


// for last occurnace
#include<iostream>
using namespace std;
int main(){
    int n=12;
    int arr[n]={1,2,2,2,3,3,4,4,5,6,7,7};
    int target=2;
    int l=0;
    int r=n-1;
    int last=-1;

    while(l<=r){
        int mid=(l+r)/2;
        if(arr[mid]==target){
            last=mid;
            l=mid+1;
        }
        else if(arr[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;

        }

    }
    cout<<last;
    return 0;

}

//for the count of number

#include<iostream>
using namespace std;
int main(){
    int n=12;
    int arr[n]={1,2,2,2,3,3,4,4,5,6,7,7};
    int target=2;
    int l=0;
    int r=n-1;
    int last=-1;
    int first=-1;

    while(l<=r){
        int mid=(l+r)/2;
        if(arr[mid]==target){
            last=mid;
            l=mid+1;
        }
        else if(arr[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;

        }

    }
    l=0;
    r=n-1;
    while(l<=r){
        int mid=(l+r)/2;
        if(arr[mid]==target){
            first=mid;
            r=mid-1;
        }
        else if(arr[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;

        }

    }
    if(first != -1){
        cout << "Count = " << (last - first + 1);
    } else {
        cout << "Not found";
    }
    return 0;

}

